import {Fragment, useEffect, useState} from 'react'
import { Popover, Transition } from '@headlessui/react'
import axios from 'axios';
import {componentKits, hardcodedComponentOptions} from "./constants/sample-data.jsx";

export default function AddComponentFlyoutMenu({ onCreateClick }) { //kitOptions, componentOptions,

    const [kitOptions, setKitOptions] = useState([]);
    const [componentOptions, setComponentOptions] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    const [open, setOpen] = useState(false)
    const [selectedKit, setSelectedKit] = useState(null);
    const [searchStr, setSearchStr] = useState('');

    const [filteredComponents, setFilteredComponents] = useState(componentOptions);

    /**
     * Fetches data from a specified URL and updates the state variables.
     *
     * @async
     * @param {string} url - The URL to fetch data from.
     * @param {function} setData - The function to update the data state variable.
     * @param {function} setError - The function to update the error state variable.
     * @returns {void}
     */
    const fetchData = async (url, setData, setError) => {
        try {
            const response = await axios.get(url);
            setData(response.data);
            setError(null);
        } catch (err) {
            setError(err.message);
            setData(null);
        } finally {
            setLoading(false);
        }
    }


    useEffect(() => {
        fetchData('/kits', setKitOptions, setError);
        fetchData('/components', setComponentOptions, setError);
        // setKitOptions(componentKits);
        // setComponentOptions(hardcodedComponentOptions);
    }, []);

    /**
     * Updates the search string based on the value of the event target.
     *
     * @param {Event} event - The event object generated by the event.
     */
    const handleFilter = (event) => {
        setSearchStr(event.target.value);
    };


    useEffect(() => {
        filterComponents();
    }, [componentOptions, selectedKit, searchStr]);

    /**
     * Filter the component options based on selected kit and search string.
     * If no kit is selected and no search string is provided, returns all component options.
     *
     * @function
     * @name filterComponents
     * @returns {void}
     * @memberOf global
     */
    const filterComponents = () => {
        var filtered = [];
        if (componentOptions) {
            if (selectedKit && searchStr !== '') {
                filtered = componentOptions.filter(comp => comp.kit_id === selectedKit.id && comp.name.includes(searchStr.toLowerCase()));
            } else if (selectedKit) {
                filtered = componentOptions.filter(comp => comp.kit_id === selectedKit.id);
            } else if (searchStr !== '') {
                filtered = componentOptions.filter(comp => comp.name.includes(searchStr.toLowerCase()));
            } else {
                filtered = componentOptions;
            }
            setFilteredComponents(filtered);
        }
    }

    const handleCreateClick = (item) => {
        if(item) {
            onCreateClick(item);
            handlePopoverClose();
        }
    };

    const handlePopoverClose = () => {
        setOpen(false);
        clearFilters();
    };

    /**
     * Clears the filters by resetting the selected kit, filtered components, and search string.
     *
     * @function
     * @name clearFilters
     * @returns {void}
     */
    const clearFilters = () => {
        setSelectedKit(null);
        setFilteredComponents(componentOptions);
        setSearchStr('');
    }


    /**
     * Combines multiple class names into a single space-separated string.
     *
     * @param {string[]} classes - An array containing the class names to be combined.
     * @returns {string} - A string containing the combined class names.
     */
    function classNames(...classes) {
        return classes.filter(Boolean).join(' ')
    }

    return (
        <Popover className="isolate z-50">
                <div className="inline-flex text-success p-2">
                    <Popover.Button onClick={()=>{setOpen(!open)}}
                                    className="btn btn-ghost btn-sm">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5"
                             stroke="currentColor" className="w-6 h-6">
                            <path strokeLinecap="round" strokeLinejoin="round" d="M12 4.5v15m7.5-7.5h-15"/>
                        </svg>
                        <div className="pl-2">add component</div>
                    </Popover.Button>
                </div>
                <Transition
                    show={open}
                    as={Fragment}
                    enter="transition ease-out duration-200"
                    enterFrom="opacity-0 -translate-y-1"
                    enterTo="opacity-100 translate-y-0"
                    leave="transition ease-in duration-150"
                    leaveFrom="opacity-100 translate-y-0"
                    leaveTo="opacity-0 -translate-y-1"
                >
                    <Popover.Panel
                        className="absolute left-0 -z-10 bg-white rounded-lg pt-4 pb-4 shadow-xl">

                        <Popover.Button
                            className="btn btn-circle btn-outline btn-sm absolute top-2 right-2 px-0"
                            onClick={handlePopoverClose}>
                            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24"
                                 stroke="currentColor">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2"
                                      d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                        </Popover.Button>

                        <div
                            className="mx-auto grid max-w-7xl grid-cols-1 gap-x-8 gap-y-10 px-4 py-10 lg:grid-cols-2 lg:px-8">
                            <div className="grid grid-cols-2 gap-x-6 sm:gap-x-8">
                            <div>
                                <div className="relative mr-6 my-2 py-3">
                                    <input onChange={handleFilter} type="search"
                                           className="block w-full rounded-md border-0 py-1.5 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 placeholder:text-base-300 focus:ring-2 focus:ring-inset focus:ring-primary sm:text-sm sm:leading-6 w-full max-w-md p-3"
                                           placeholder="Search by name..."/>
                                    <div
                                        className="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-3">
                                        {/*{searchStr === null || searchStr.length === 0 ?*/}
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"
                                             strokeWidth="1.5" stroke="currentColor" className="w-6 h-6">
                                            <path strokeLinecap="round" strokeLinejoin="round"
                                                  d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"></path>
                                        </svg>
                                            {/*: null }*/}
                                    </div>
                                </div>

                                <h3 className="font-medium text-primary font-bold leading-6 text-gray-500 mt-4">Kits:</h3>
                                <div className="mt-2 flow-root">
                                    <div className="-my-2">
                                        <a
                                            onClick={() => setSelectedKit(null)}
                                            className={classNames(selectedKit === null ? 'text-gray-900' : 'text-gray-500', ' flex gap-x-4 py-2 text-sm font-semibold leading-6')}
                                            >
                                                All Components
                                            </a>
                                            {kitOptions && kitOptions.map((item, index) => (
                                                <a
                                                    onClick={() => setSelectedKit(item)}
                                                    key={item.id + '-' + index}
                                                    className={classNames(selectedKit && selectedKit.id === item.id ? 'text-gray-900' : 'text-gray-500', ' flex gap-x-4 py-2 text-sm font-semibold leading-6')}
                                                >
                                                    {item.name}
                                                </a>
                                            ))}
                                        </div>
                                    </div>
                                </div>
                                <div>
                                    <h3 className="sr-only">Kit Components</h3>
                                    {filteredComponents && filteredComponents.map((item) => (
                                        <div onClick={handleCreateClick}
                                             key={item.name}
                                             data-value={JSON.stringify(item)}
                                             className={'text-gray-700 group flex items-center px-4 py-2 text-sm h-12 capitalize cursor-pointer'}>
                                            <img src={'../../../images/' + item.name + '.icon.png'}
                                                 className="w-8 mr-2"/>
                                            {item.name}
                                        </div>
                                    ))}
                                </div>
                            </div>
                        </div>
                    </Popover.Panel>
                </Transition>
        </Popover>
    )
}
